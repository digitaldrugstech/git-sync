---
name: Build and Publish Container

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set build version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="$(git describe --tags --always --dirty)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Create unified Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          # Build stage
          FROM --platform=$BUILDPLATFORM golang:1.25 AS builder

          ARG TARGETOS
          ARG TARGETARCH
          ARG VERSION

          WORKDIR /src
          COPY . .

          RUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH \
              go build -trimpath \
              -ldflags="-s -w -X k8s.io/git-sync/pkg/version.VERSION=$VERSION" \
              -o /git-sync .

          # Runtime stage
          FROM debian:trixie AS base

          RUN apt-get -y -qq update && \
              apt-get -y -qq upgrade && \
              apt-get -y -qq install --no-install-recommends \
                bash \
                git \
                openssh-client \
                ca-certificates && \
              apt-get clean && \
              rm -rf /var/lib/apt/lists/*

          # Add the default UID to /etc/passwd
          RUN echo "git-sync:x:65533:65533::/tmp:/sbin/nologin" >> /etc/passwd && \
              chmod 0666 /etc/passwd && \
              echo "git-sync:x:65533:git-sync" >> /etc/group

          # Create git directory
          RUN mkdir -m 02775 /git && chown 65533:65533 /git

          # Copy binary from builder
          COPY --from=builder /git-sync /git-sync

          # Run as non-root
          USER 65533:65533
          ENV HOME=/tmp
          ENV GITSYNC_ROOT=/git
          WORKDIR /tmp

          ENTRYPOINT ["/git-sync"]
          EOF

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
